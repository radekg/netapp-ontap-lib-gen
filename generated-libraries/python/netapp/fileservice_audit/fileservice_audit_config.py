from netapp.netapp_object import NetAppObject

class FileserviceAuditConfig(NetAppObject):
    """
    Vserver Audit configuration and management on name
    When returned as part of the output, all elements of this typedef
    are reported, unless limited by a set of desired attributes
    specified by the caller.
    <p>
    When used as input to specify desired attributes to return,
    omitting a given element indicates that it shall not be returned
    in the output.  In contrast, by providing an element (even with
    no value) the caller ensures that a value for that element will
    be returned, given that the value can be retrieved.
    <p>
    When used as input to specify queries, any element can be omitted
    in which case the resulting set of objects is not constrained by
    any specific value of that attribute.
    """
    
    _rotate_limit = None
    @property
    def rotate_limit(self):
        """
        Audit log files rotation Limit. A value of 0 indicates
        that all the files will be retained. Default: 0
        Attributes: optional-for-create, modifiable
        """
        return self._rotate_limit
    @rotate_limit.setter
    def rotate_limit(self, val):
        if val != None:
            self.validate('rotate_limit', val)
        self._rotate_limit = val
    
    _rotate_size = None
    @property
    def rotate_size(self):
        """
        Audit log file size limit. By default rotation is done
        based on size. This field is mutually exclusive with time
        related rotate fields. If time based rotation is needed
        use the time based rotation fields(rotate-schedule-month,
        rotate-schedule-dayofweek, rotate-schedule-day... etc).
        Default: 100MB
        Attributes: optional-for-create, modifiable
        """
        return self._rotate_size
    @rotate_size.setter
    def rotate_size(self, val):
        if val != None:
            self.validate('rotate_size', val)
        self._rotate_size = val
    
    _format = None
    @property
    def format(self):
        """
        The format in which the logs would be generated by
        consolidation process. Default: evtx
        Attributes: optional-for-create, modifiable
        Possible values:
        <ul>
        <li> "xml"  - Data ONTAP-Specific XML Log Format,
        <li> "evtx" - Microsoft Windows EVTX Log Format
        </ul>
        """
        return self._format
    @format.setter
    def format(self, val):
        if val != None:
            self.validate('format', val)
        self._format = val
    
    _destination = None
    @property
    def destination(self):
        """
        Audit log destination path. The path where consolidated
        audit logs are stored. If the path is not valid, the api
        returns error
        Attributes: required-for-create, modifiable
        """
        return self._destination
    @destination.setter
    def destination(self, val):
        if val != None:
            self.validate('destination', val)
        self._destination = val
    
    _rotate_schedule_minute = None
    @property
    def rotate_schedule_minute(self):
        """
        Audit Log rotation schedule: Minute. By Default rotation
        is done based on size. This field is mutually exclusive
        with rotate-size. Do not use this field along with
        rotate-size field
        Attributes: optional-for-create, modifiable
        """
        return self._rotate_schedule_minute
    @rotate_schedule_minute.setter
    def rotate_schedule_minute(self, val):
        if val != None:
            self.validate('rotate_schedule_minute', val)
        self._rotate_schedule_minute = val
    
    _vserver = None
    @property
    def vserver(self):
        """
        Vserver
        Attributes: key, non-creatable, non-modifiable
        """
        return self._vserver
    @vserver.setter
    def vserver(self, val):
        if val != None:
            self.validate('vserver', val)
        self._vserver = val
    
    _rotate_schedule_month = None
    @property
    def rotate_schedule_month(self):
        """
        Audit log rotation schedule: Month. By Default rotation
        is done based on size. This field is mutually exclusive
        with rotate-size. Do not use this field along with
        rotate-size field
        Attributes: optional-for-create, modifiable
        """
        return self._rotate_schedule_month
    @rotate_schedule_month.setter
    def rotate_schedule_month(self, val):
        if val != None:
            self.validate('rotate_schedule_month', val)
        self._rotate_schedule_month = val
    
    _rotation_schedule_description = None
    @property
    def rotation_schedule_description(self):
        """
        Rotation schedules derived from rotation time related
        parameters
        Attributes: non-creatable, non-modifiable
        """
        return self._rotation_schedule_description
    @rotation_schedule_description.setter
    def rotation_schedule_description(self, val):
        if val != None:
            self.validate('rotation_schedule_description', val)
        self._rotation_schedule_description = val
    
    _is_enabled = None
    @property
    def is_enabled(self):
        """
        Auditing State. Default: false
        Attributes: non-creatable, non-modifiable
        """
        return self._is_enabled
    @is_enabled.setter
    def is_enabled(self, val):
        if val != None:
            self.validate('is_enabled', val)
        self._is_enabled = val
    
    _audit_guarantee = None
    @property
    def audit_guarantee(self):
        """
        Strict guarantee of auditing for a Vserver. If this is
        true, file access is denied if audit record can not be
        generated and if this is false, auditing is done on a
        best effort basis. Default: true
        Attributes: non-creatable, modifiable
        """
        return self._audit_guarantee
    @audit_guarantee.setter
    def audit_guarantee(self, val):
        if val != None:
            self.validate('audit_guarantee', val)
        self._audit_guarantee = val
    
    _rotate_schedule_dayofweek = None
    @property
    def rotate_schedule_dayofweek(self):
        """
        Audit log rotation schedule: Day of Week. By Default
        rotation is done based on size. This field is mutually
        exclusive with rotate-size. Do not use this field along
        with rotate-size field
        Attributes: optional-for-create, modifiable
        """
        return self._rotate_schedule_dayofweek
    @rotate_schedule_dayofweek.setter
    def rotate_schedule_dayofweek(self, val):
        if val != None:
            self.validate('rotate_schedule_dayofweek', val)
        self._rotate_schedule_dayofweek = val
    
    _rotate_schedule_day = None
    @property
    def rotate_schedule_day(self):
        """
        Audit log rotation schedule: Day. By Default rotation is
        done based on size. This field is mutually exclusive with
        rotate-size. Do not use this field along with rotate-size
        field
        Attributes: optional-for-create, modifiable
        """
        return self._rotate_schedule_day
    @rotate_schedule_day.setter
    def rotate_schedule_day(self, val):
        if val != None:
            self.validate('rotate_schedule_day', val)
        self._rotate_schedule_day = val
    
    _rotate_schedule_hour = None
    @property
    def rotate_schedule_hour(self):
        """
        Audit log rotation schedule: Hour. By Default rotation is
        done based on size. This field is mutually exclusive with
        rotate-size. Do not use this field along with rotate-size
        field
        Attributes: optional-for-create, modifiable
        """
        return self._rotate_schedule_hour
    @rotate_schedule_hour.setter
    def rotate_schedule_hour(self, val):
        if val != None:
            self.validate('rotate_schedule_hour', val)
        self._rotate_schedule_hour = val
    
    @staticmethod
    def get_api_name():
          return "fileservice-audit-config"
    
    @staticmethod
    def get_desired_attrs():
        return [
            'rotate-limit',
            'rotate-size',
            'format',
            'destination',
            'rotate-schedule-minute',
            'vserver',
            'rotate-schedule-month',
            'rotation-schedule-description',
            'is-enabled',
            'audit-guarantee',
            'rotate-schedule-dayofweek',
            'rotate-schedule-day',
            'rotate-schedule-hour',
        ]
    
    def describe_properties(self):
        return {
            'rotate_limit': { 'class': int, 'is_list': False, 'required': 'optional' },
            'rotate_size': { 'class': int, 'is_list': False, 'required': 'optional' },
            'format': { 'class': basestring, 'is_list': False, 'required': 'optional' },
            'destination': { 'class': basestring, 'is_list': False, 'required': 'optional' },
            'rotate_schedule_minute': { 'class': int, 'is_list': True, 'required': 'optional' },
            'vserver': { 'class': basestring, 'is_list': False, 'required': 'optional' },
            'rotate_schedule_month': { 'class': int, 'is_list': True, 'required': 'optional' },
            'rotation_schedule_description': { 'class': basestring, 'is_list': False, 'required': 'optional' },
            'is_enabled': { 'class': bool, 'is_list': False, 'required': 'optional' },
            'audit_guarantee': { 'class': bool, 'is_list': False, 'required': 'optional' },
            'rotate_schedule_dayofweek': { 'class': int, 'is_list': True, 'required': 'optional' },
            'rotate_schedule_day': { 'class': int, 'is_list': True, 'required': 'optional' },
            'rotate_schedule_hour': { 'class': int, 'is_list': True, 'required': 'optional' },
        }
