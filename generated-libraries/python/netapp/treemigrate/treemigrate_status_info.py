from netapp.netapp_object import NetAppObject

class TreemigrateStatusInfo(NetAppObject):
    """
    Information about a single migration.
    """
    
    _last_request_proxy_timestamp = None
    @property
    def last_request_proxy_timestamp(self):
        """
        Time of last proxied request in seconds since Jan 1, 1970.
        """
        return self._last_request_proxy_timestamp
    @last_request_proxy_timestamp.setter
    def last_request_proxy_timestamp(self, val):
        if val != None:
            self.validate('last_request_proxy_timestamp', val)
        self._last_request_proxy_timestamp = val
    
    _number_directories_processed = None
    @property
    def number_directories_processed(self):
        """
        The number of directories processed on the source
        system.
        """
        return self._number_directories_processed
    @number_directories_processed.setter
    def number_directories_processed(self, val):
        if val != None:
            self.validate('number_directories_processed', val)
        self._number_directories_processed = val
    
    _migration_state = None
    @property
    def migration_state(self):
        """
        The current state of the migration.
        Possible values are: "initializing", "copy", "crawl",
        "proxy", "proxy_cleanup", "migration_complete",
        "crawl_complete", "aborting", "aborted", "failing",
        "failed", "reconnecting", and "not_set"
        """
        return self._migration_state
    @migration_state.setter
    def migration_state(self, val):
        if val != None:
            self.validate('migration_state', val)
        self._migration_state = val
    
    _proxy_inactivity_timeout = None
    @property
    def proxy_inactivity_timeout(self):
        """
        The number of minutes after which no requests have been
        proxied or no locks generated by the source are still
        held on the destination system, then the migration moves
        from the Proxy state to the Proxy Cleanup state.
        """
        return self._proxy_inactivity_timeout
    @proxy_inactivity_timeout.setter
    def proxy_inactivity_timeout(self, val):
        if val != None:
            self.validate('proxy_inactivity_timeout', val)
        self._proxy_inactivity_timeout = val
    
    _migration_id = None
    @property
    def migration_id(self):
        """
        The migration identifier.
        """
        return self._migration_id
    @migration_id.setter
    def migration_id(self, val):
        if val != None:
            self.validate('migration_id', val)
        self._migration_id = val
    
    _destination_path = None
    @property
    def destination_path(self):
        """
        The path to the migrated data on the destination
        system.
        """
        return self._destination_path
    @destination_path.setter
    def destination_path(self, val):
        if val != None:
            self.validate('destination_path', val)
        self._destination_path = val
    
    _file_handle_map_size = None
    @property
    def file_handle_map_size(self):
        """
        The size of the file handle mapping table in bytes.
        """
        return self._file_handle_map_size
    @file_handle_map_size.setter
    def file_handle_map_size(self, val):
        if val != None:
            self.validate('file_handle_map_size', val)
        self._file_handle_map_size = val
    
    _migration_priority = None
    @property
    def migration_priority(self):
        """
        The priority level of the copy phase of the migration.
        Possible values are: "fast", "medium", or "slow".
        """
        return self._migration_priority
    @migration_priority.setter
    def migration_priority(self, val):
        if val != None:
            self.validate('migration_priority', val)
        self._migration_priority = val
    
    _data_copied = None
    @property
    def data_copied(self):
        """
        The amount of data migrated in bytes.
        """
        return self._data_copied
    @data_copied.setter
    def data_copied(self, val):
        if val != None:
            self.validate('data_copied', val)
        self._data_copied = val
    
    _number_requests_proxied = None
    @property
    def number_requests_proxied(self):
        """
        The number of requests that have been proxied.
        """
        return self._number_requests_proxied
    @number_requests_proxied.setter
    def number_requests_proxied(self, val):
        if val != None:
            self.validate('number_requests_proxied', val)
        self._number_requests_proxied = val
    
    _copy_end_timestamp = None
    @property
    def copy_end_timestamp(self):
        """
        Copy end time in seconds since Jan 1, 1970.
        """
        return self._copy_end_timestamp
    @copy_end_timestamp.setter
    def copy_end_timestamp(self, val):
        if val != None:
            self.validate('copy_end_timestamp', val)
        self._copy_end_timestamp = val
    
    _destination_filer = None
    @property
    def destination_filer(self):
        """
        The hostname or IP address of the destination system.
        """
        return self._destination_filer
    @destination_filer.setter
    def destination_filer(self, val):
        if val != None:
            self.validate('destination_filer', val)
        self._destination_filer = val
    
    _number_files_migrated = None
    @property
    def number_files_migrated(self):
        """
        The number of files migrated from the source system to
        the destination system.
        """
        return self._number_files_migrated
    @number_files_migrated.setter
    def number_files_migrated(self, val):
        if val != None:
            self.validate('number_files_migrated', val)
        self._number_files_migrated = val
    
    _source_path = None
    @property
    def source_path(self):
        """
        The path to the migrated data on the source system.
        """
        return self._source_path
    @source_path.setter
    def source_path(self, val):
        if val != None:
            self.validate('source_path', val)
        self._source_path = val
    
    _copy_start_timestamp = None
    @property
    def copy_start_timestamp(self):
        """
        Copy start time in seconds since Jan 1, 1970.
        """
        return self._copy_start_timestamp
    @copy_start_timestamp.setter
    def copy_start_timestamp(self, val):
        if val != None:
            self.validate('copy_start_timestamp', val)
        self._copy_start_timestamp = val
    
    @staticmethod
    def get_api_name():
          return "treemigrate-status-info"
    
    @staticmethod
    def get_desired_attrs():
        return [
            'last-request-proxy-timestamp',
            'number-directories-processed',
            'migration-state',
            'proxy-inactivity-timeout',
            'migration-id',
            'destination-path',
            'file-handle-map-size',
            'migration-priority',
            'data-copied',
            'number-requests-proxied',
            'copy-end-timestamp',
            'destination-filer',
            'number-files-migrated',
            'source-path',
            'copy-start-timestamp',
        ]
    
    def describe_properties(self):
        return {
            'last_request_proxy_timestamp': { 'class': int, 'is_list': False, 'required': 'required' },
            'number_directories_processed': { 'class': int, 'is_list': False, 'required': 'required' },
            'migration_state': { 'class': basestring, 'is_list': False, 'required': 'required' },
            'proxy_inactivity_timeout': { 'class': int, 'is_list': False, 'required': 'required' },
            'migration_id': { 'class': int, 'is_list': False, 'required': 'required' },
            'destination_path': { 'class': basestring, 'is_list': False, 'required': 'required' },
            'file_handle_map_size': { 'class': int, 'is_list': False, 'required': 'required' },
            'migration_priority': { 'class': basestring, 'is_list': False, 'required': 'required' },
            'data_copied': { 'class': int, 'is_list': False, 'required': 'required' },
            'number_requests_proxied': { 'class': int, 'is_list': False, 'required': 'required' },
            'copy_end_timestamp': { 'class': int, 'is_list': False, 'required': 'required' },
            'destination_filer': { 'class': basestring, 'is_list': False, 'required': 'required' },
            'number_files_migrated': { 'class': int, 'is_list': False, 'required': 'required' },
            'source_path': { 'class': basestring, 'is_list': False, 'required': 'required' },
            'copy_start_timestamp': { 'class': int, 'is_list': False, 'required': 'required' },
        }
